/**
 * @swagger
 * components:
 *   schemas:
 *     Member:
 *       type: object
 *       required:
 *         - code
 *         - name
 *       properties:
 *         code:
 *           type: string
 *           description: Code generated by human, and it's unique
 *         name:
 *           type: string
 *           description: Name of the member
 *       example:
 *         code: M-100
 *         name: Sunny
 */

const express = require("express");
const router = express.Router();

const memberController = require("../controllers/member.controller");

/**
 * @swagger
 * tags:
 *   name: Members
 *   description: The members managing API
 * /members:
 *   get:
 *     summary: Get all members list
 *     tags: [Members]
 *     requestBody:
 *       required: false
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Member'
 *     responses:
 *       200:
 *         description: List of all member, but borrowed and it's quantities that hasn't borrowed.
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Member'
 *       404:
 *         description: data not found
 * /members/book:
 *   post:
 *     summary: Borrow a book for a certain member
 *     tags: [Members]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *            type: object
 *            required:
 *              - member_code
 *              - book_code
 *            properties:
 *              member_code:
 *                type: string
 *                description: Code generated by human, and it's unique
 *              book_code:
 *                type: string
 *                description: Name of the member
 *            example:
 *              member_code: M-100
 *              book_code: TW-11
 *     responses:
 *       200:
 *         description: borrowing a book.
 *         content:
 *           application/json:
 *             schema:
 *              type: object
 *              properties:
 *                message:
 *                  type: string
 *                  description: a response message
 *                data:
 *                  type: object
 *                  description: detail of borrowing
 *       422:
 *         description: input invalid
 *       500:
 *         description: something error with the server
 *   put:
 *     summary: return a book for a certain member
 *     tags: [Members]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *            type: object
 *            required:
 *              - member_code
 *              - book_code
 *            properties:
 *              member_code:
 *                type: string
 *                description: Code generated by human, and it's unique
 *              book_code:
 *                type: string
 *                description: Name of the member
 *            example:
 *              member_code: M-100
 *              book_code: TW-11
 *     responses:
 *       200:
 *         description: borrowing a book.
 *         content:
 *           application/json:
 *             schema:
 *              type: object
 *              properties:
 *                message:
 *                  type: string
 *                  description: a response message
 *                data:
 *                  type: object
 *                  description: detail of borrowing
 *       404:
 *         description: Data not found
 *       500:
 *         description: something error with the server
 *
 *
 */
router.get("/members", memberController.getAllMembers);
router.post("/members/book", memberController.borrowBook);
router.put("/members/book", memberController.returnTheBook);

module.exports = router;
